#pragma checksum "C:\Users\Ghaster\IdeaProjects\UBB-SE-2025-MarketMinds-Steam\SteamProfile\Views\ProfilePage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "9C028906674AC3BDF7EA3813406D08ED2CB23E16EA1313CE6FEA0305EF3F7591"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SteamProfile.Views
{
    partial class ProfilePage : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Microsoft_UI_Xaml_UIElement_Visibility(global::Microsoft.UI.Xaml.UIElement obj, global::Microsoft.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(global::Microsoft.UI.Xaml.Controls.ItemsControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.ItemsSource = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Image_Source(global::Microsoft.UI.Xaml.Controls.Image obj, global::Microsoft.UI.Xaml.Media.ImageSource value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), targetNullValue);
                }
                obj.Source = value;
            }
            public static void Set_Microsoft_UI_Xaml_UIElement_Opacity(global::Microsoft.UI.Xaml.UIElement obj, global::System.Double value)
            {
                obj.Opacity = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_ContentControl_Content(global::Microsoft.UI.Xaml.Controls.ContentControl obj, global::System.Object value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Object) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Object), targetNullValue);
                }
                obj.Content = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class ProfilePage_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IProfilePage_Bindings
        {
            private global::SteamProfile.Views.ProfilePage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Microsoft.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Microsoft.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.Button obj2;
            private global::Microsoft.UI.Xaml.Controls.Border obj3;
            private global::Microsoft.UI.Xaml.Controls.ItemsControl obj4;
            private global::Microsoft.UI.Xaml.Controls.Button obj6;
            private global::Microsoft.UI.Xaml.Controls.Button obj7;
            private global::Microsoft.UI.Xaml.Controls.Button obj8;
            private global::Microsoft.UI.Xaml.Controls.Button obj9;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj10;
            private global::Microsoft.UI.Xaml.Controls.Image obj11;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj12;
            private global::Microsoft.UI.Xaml.Controls.Image obj13;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj14;
            private global::Microsoft.UI.Xaml.Controls.Image obj15;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj16;
            private global::Microsoft.UI.Xaml.Controls.Image obj17;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj18;
            private global::Microsoft.UI.Xaml.Controls.Image obj19;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj20;
            private global::Microsoft.UI.Xaml.Controls.Image obj21;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj22;
            private global::Microsoft.UI.Xaml.Controls.Image obj23;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj24;
            private global::Microsoft.UI.Xaml.Controls.Image obj25;
            private global::Microsoft.UI.Xaml.Controls.Button obj26;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj28;
            private global::Microsoft.UI.Xaml.Controls.Button obj29;
            private global::Microsoft.UI.Xaml.Controls.Button obj30;
            private global::Microsoft.UI.Xaml.Controls.Border obj31;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj32;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2CommandDisabled = false;
            private static bool isobj2VisibilityDisabled = false;
            private static bool isobj3VisibilityDisabled = false;
            private static bool isobj4ItemsSourceDisabled = false;
            private static bool isobj6CommandDisabled = false;
            private static bool isobj7CommandDisabled = false;
            private static bool isobj7VisibilityDisabled = false;
            private static bool isobj8CommandDisabled = false;
            private static bool isobj8VisibilityDisabled = false;
            private static bool isobj9CommandDisabled = false;
            private static bool isobj9VisibilityDisabled = false;
            private static bool isobj10TextDisabled = false;
            private static bool isobj11SourceDisabled = false;
            private static bool isobj11OpacityDisabled = false;
            private static bool isobj12TextDisabled = false;
            private static bool isobj13SourceDisabled = false;
            private static bool isobj13OpacityDisabled = false;
            private static bool isobj14TextDisabled = false;
            private static bool isobj15SourceDisabled = false;
            private static bool isobj15OpacityDisabled = false;
            private static bool isobj16TextDisabled = false;
            private static bool isobj17SourceDisabled = false;
            private static bool isobj17OpacityDisabled = false;
            private static bool isobj18TextDisabled = false;
            private static bool isobj19SourceDisabled = false;
            private static bool isobj19OpacityDisabled = false;
            private static bool isobj20TextDisabled = false;
            private static bool isobj21SourceDisabled = false;
            private static bool isobj21OpacityDisabled = false;
            private static bool isobj22TextDisabled = false;
            private static bool isobj23SourceDisabled = false;
            private static bool isobj23OpacityDisabled = false;
            private static bool isobj24TextDisabled = false;
            private static bool isobj25SourceDisabled = false;
            private static bool isobj25OpacityDisabled = false;
            private static bool isobj26CommandDisabled = false;
            private static bool isobj28TextDisabled = false;
            private static bool isobj29CommandDisabled = false;
            private static bool isobj29VisibilityDisabled = false;
            private static bool isobj30ContentDisabled = false;
            private static bool isobj30CommandDisabled = false;
            private static bool isobj30VisibilityDisabled = false;
            private static bool isobj31VisibilityDisabled = false;
            private static bool isobj32TextDisabled = false;

            private ProfilePage_obj1_BindingsTracking bindingsTracking;

            public ProfilePage_obj1_Bindings()
            {
                this.bindingsTracking = new ProfilePage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 307 && columnNumber == 21)
                {
                    isobj2CommandDisabled = true;
                }
                else if (lineNumber == 311 && columnNumber == 21)
                {
                    isobj2VisibilityDisabled = true;
                }
                else if (lineNumber == 370 && columnNumber == 29)
                {
                    isobj3VisibilityDisabled = true;
                }
                else if (lineNumber == 382 && columnNumber == 35)
                {
                    isobj4ItemsSourceDisabled = true;
                }
                else if (lineNumber == 374 && columnNumber == 33)
                {
                    isobj6CommandDisabled = true;
                }
                else if (lineNumber == 322 && columnNumber == 25)
                {
                    isobj7CommandDisabled = true;
                }
                else if (lineNumber == 323 && columnNumber == 25)
                {
                    isobj7VisibilityDisabled = true;
                }
                else if (lineNumber == 336 && columnNumber == 25)
                {
                    isobj8CommandDisabled = true;
                }
                else if (lineNumber == 337 && columnNumber == 25)
                {
                    isobj8VisibilityDisabled = true;
                }
                else if (lineNumber == 348 && columnNumber == 25)
                {
                    isobj9CommandDisabled = true;
                }
                else if (lineNumber == 349 && columnNumber == 25)
                {
                    isobj9VisibilityDisabled = true;
                }
                else if (lineNumber == 285 && columnNumber == 36)
                {
                    isobj10TextDisabled = true;
                }
                else if (lineNumber == 282 && columnNumber == 36)
                {
                    isobj11SourceDisabled = true;
                }
                else if (lineNumber == 283 && columnNumber == 36)
                {
                    isobj11OpacityDisabled = true;
                }
                else if (lineNumber == 269 && columnNumber == 36)
                {
                    isobj12TextDisabled = true;
                }
                else if (lineNumber == 266 && columnNumber == 36)
                {
                    isobj13SourceDisabled = true;
                }
                else if (lineNumber == 267 && columnNumber == 36)
                {
                    isobj13OpacityDisabled = true;
                }
                else if (lineNumber == 253 && columnNumber == 36)
                {
                    isobj14TextDisabled = true;
                }
                else if (lineNumber == 250 && columnNumber == 36)
                {
                    isobj15SourceDisabled = true;
                }
                else if (lineNumber == 251 && columnNumber == 36)
                {
                    isobj15OpacityDisabled = true;
                }
                else if (lineNumber == 237 && columnNumber == 36)
                {
                    isobj16TextDisabled = true;
                }
                else if (lineNumber == 234 && columnNumber == 36)
                {
                    isobj17SourceDisabled = true;
                }
                else if (lineNumber == 235 && columnNumber == 36)
                {
                    isobj17OpacityDisabled = true;
                }
                else if (lineNumber == 221 && columnNumber == 36)
                {
                    isobj18TextDisabled = true;
                }
                else if (lineNumber == 218 && columnNumber == 36)
                {
                    isobj19SourceDisabled = true;
                }
                else if (lineNumber == 219 && columnNumber == 36)
                {
                    isobj19OpacityDisabled = true;
                }
                else if (lineNumber == 205 && columnNumber == 36)
                {
                    isobj20TextDisabled = true;
                }
                else if (lineNumber == 202 && columnNumber == 36)
                {
                    isobj21SourceDisabled = true;
                }
                else if (lineNumber == 203 && columnNumber == 36)
                {
                    isobj21OpacityDisabled = true;
                }
                else if (lineNumber == 189 && columnNumber == 36)
                {
                    isobj22TextDisabled = true;
                }
                else if (lineNumber == 186 && columnNumber == 36)
                {
                    isobj23SourceDisabled = true;
                }
                else if (lineNumber == 187 && columnNumber == 36)
                {
                    isobj23OpacityDisabled = true;
                }
                else if (lineNumber == 173 && columnNumber == 36)
                {
                    isobj24TextDisabled = true;
                }
                else if (lineNumber == 170 && columnNumber == 36)
                {
                    isobj25SourceDisabled = true;
                }
                else if (lineNumber == 171 && columnNumber == 36)
                {
                    isobj25OpacityDisabled = true;
                }
                else if (lineNumber == 147 && columnNumber == 29)
                {
                    isobj26CommandDisabled = true;
                }
                else if (lineNumber == 120 && columnNumber == 40)
                {
                    isobj28TextDisabled = true;
                }
                else if (lineNumber == 76 && columnNumber == 29)
                {
                    isobj29CommandDisabled = true;
                }
                else if (lineNumber == 78 && columnNumber == 29)
                {
                    isobj29VisibilityDisabled = true;
                }
                else if (lineNumber == 92 && columnNumber == 33)
                {
                    isobj30ContentDisabled = true;
                }
                else if (lineNumber == 93 && columnNumber == 29)
                {
                    isobj30CommandDisabled = true;
                }
                else if (lineNumber == 97 && columnNumber == 29)
                {
                    isobj30VisibilityDisabled = true;
                }
                else if (lineNumber == 105 && columnNumber == 37)
                {
                    isobj31VisibilityDisabled = true;
                }
                else if (lineNumber == 85 && columnNumber == 48)
                {
                    isobj32TextDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Views\ProfilePage.xaml line 305
                        this.obj2 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 3: // Views\ProfilePage.xaml line 367
                        this.obj3 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Border>(target);
                        break;
                    case 4: // Views\ProfilePage.xaml line 382
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ItemsControl>(target);
                        break;
                    case 6: // Views\ProfilePage.xaml line 371
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 7: // Views\ProfilePage.xaml line 319
                        this.obj7 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 8: // Views\ProfilePage.xaml line 333
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 9: // Views\ProfilePage.xaml line 347
                        this.obj9 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 10: // Views\ProfilePage.xaml line 285
                        this.obj10 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 11: // Views\ProfilePage.xaml line 282
                        this.obj11 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        break;
                    case 12: // Views\ProfilePage.xaml line 269
                        this.obj12 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 13: // Views\ProfilePage.xaml line 266
                        this.obj13 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        break;
                    case 14: // Views\ProfilePage.xaml line 253
                        this.obj14 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 15: // Views\ProfilePage.xaml line 250
                        this.obj15 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        break;
                    case 16: // Views\ProfilePage.xaml line 237
                        this.obj16 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 17: // Views\ProfilePage.xaml line 234
                        this.obj17 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        break;
                    case 18: // Views\ProfilePage.xaml line 221
                        this.obj18 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 19: // Views\ProfilePage.xaml line 218
                        this.obj19 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        break;
                    case 20: // Views\ProfilePage.xaml line 205
                        this.obj20 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 21: // Views\ProfilePage.xaml line 202
                        this.obj21 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        break;
                    case 22: // Views\ProfilePage.xaml line 189
                        this.obj22 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 23: // Views\ProfilePage.xaml line 186
                        this.obj23 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        break;
                    case 24: // Views\ProfilePage.xaml line 173
                        this.obj24 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 25: // Views\ProfilePage.xaml line 170
                        this.obj25 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Image>(target);
                        break;
                    case 26: // Views\ProfilePage.xaml line 144
                        this.obj26 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 28: // Views\ProfilePage.xaml line 120
                        this.obj28 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 29: // Views\ProfilePage.xaml line 74
                        this.obj29 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 30: // Views\ProfilePage.xaml line 92
                        this.obj30 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 31: // Views\ProfilePage.xaml line 102
                        this.obj31 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Border>(target);
                        break;
                    case 32: // Views\ProfilePage.xaml line 85
                        this.obj32 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IProfilePage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::SteamProfile.Views.ProfilePage>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Microsoft.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Microsoft.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Microsoft.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Microsoft.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Microsoft.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Microsoft.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::SteamProfile.Views.ProfilePage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::SteamProfile.ViewModels.ProfileViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_BackToProfileCommand(obj.BackToProfileCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_IsOwner(obj.IsOwner, phase);
                        this.Update_ViewModel_Collections(obj.Collections, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_AddCollectionCommand(obj.AddCollectionCommand, phase);
                        this.Update_ViewModel_ShowMoneyCommand(obj.ShowMoneyCommand, phase);
                        this.Update_ViewModel_ShowPointsCommand(obj.ShowPointsCommand, phase);
                        this.Update_ViewModel_ConfigurationCommand(obj.ConfigurationCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_NumberOfPostsGetTopAchievement(obj.NumberOfPostsGetTopAchievement, phase);
                        this.Update_ViewModel_YearsOfActivity(obj.YearsOfActivity, phase);
                        this.Update_ViewModel_DeveloperAchievement(obj.DeveloperAchievement, phase);
                        this.Update_ViewModel_NumberOfReviewsReceived(obj.NumberOfReviewsReceived, phase);
                        this.Update_ViewModel_NumberOfReviewsAchievement(obj.NumberOfReviewsAchievement, phase);
                        this.Update_ViewModel_SoldGamesAchievement(obj.SoldGamesAchievement, phase);
                        this.Update_ViewModel_OwnedGamesAchievement(obj.OwnedGamesAchievement, phase);
                        this.Update_ViewModel_FriendshipsAchievement(obj.FriendshipsAchievement, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ShowAllAchievementsCommand(obj.ShowAllAchievementsCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Bio(obj.Bio, phase);
                        this.Update_ViewModel_ShowFriendsCommand(obj.ShowFriendsCommand, phase);
                        this.Update_ViewModel_FriendButtonText(obj.FriendButtonText, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_ToggleFriendshipCommand(obj.ToggleFriendshipCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_IsDeveloper(obj.IsDeveloper, phase);
                        this.Update_ViewModel_FriendCount(obj.FriendCount, phase);
                    }
                }
            }
            private void Update_ViewModel_BackToProfileCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ProfilePage.xaml line 305
                    if (!isobj2CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj2, obj, null);
                    }
                }
            }
            private void Update_ViewModel_IsOwner(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_ViewModel_IsOwner_Cast_IsOwner_To_Visibility(obj ? global::Microsoft.UI.Xaml.Visibility.Visible : global::Microsoft.UI.Xaml.Visibility.Collapsed, phase);
                }
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 305
                    if (!isobj2VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj2, (global::Microsoft.UI.Xaml.Visibility)this.LookupConverter("InverseBooleanToVisibilityConverter").Convert(obj, typeof(global::Microsoft.UI.Xaml.Visibility), null, null));
                    }
                    // Views\ProfilePage.xaml line 92
                    if (!isobj30VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj30, (global::Microsoft.UI.Xaml.Visibility)this.LookupConverter("InverseBooleanToVisibilityConverter").Convert(obj, typeof(global::Microsoft.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ViewModel_IsOwner_Cast_IsOwner_To_Visibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 367
                    if (!isobj3VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj3, obj);
                    }
                    // Views\ProfilePage.xaml line 319
                    if (!isobj7VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj7, obj);
                    }
                    // Views\ProfilePage.xaml line 333
                    if (!isobj8VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj8, obj);
                    }
                    // Views\ProfilePage.xaml line 347
                    if (!isobj9VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj9, obj);
                    }
                    // Views\ProfilePage.xaml line 74
                    if (!isobj29VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj29, obj);
                    }
                }
            }
            private void Update_ViewModel_Collections(global::System.Collections.ObjectModel.ObservableCollection<global::SteamProfile.Models.Collection> obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel_Collections(obj);
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 382
                    if (!isobj4ItemsSourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ItemsControl_ItemsSource(this.obj4, obj, null);
                    }
                }
            }
            private void Update_ViewModel_AddCollectionCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ProfilePage.xaml line 371
                    if (!isobj6CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj6, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ShowMoneyCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ProfilePage.xaml line 319
                    if (!isobj7CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ShowPointsCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ProfilePage.xaml line 333
                    if (!isobj8CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ConfigurationCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ProfilePage.xaml line 347
                    if (!isobj9CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj9, obj, null);
                    }
                }
            }
            private void Update_ViewModel_NumberOfPostsGetTopAchievement(global::SteamProfile.Models.AchievementWithStatus obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_NumberOfPostsGetTopAchievement_Achievement(obj.Achievement, phase);
                        this.Update_ViewModel_NumberOfPostsGetTopAchievement_Opacity(obj.Opacity, phase);
                    }
                }
            }
            private void Update_ViewModel_NumberOfPostsGetTopAchievement_Achievement(global::SteamProfile.Models.Achievement obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_NumberOfPostsGetTopAchievement_Achievement_AchievementName(obj.AchievementName, phase);
                        this.Update_ViewModel_NumberOfPostsGetTopAchievement_Achievement_Icon(obj.Icon, phase);
                    }
                }
            }
            private void Update_ViewModel_NumberOfPostsGetTopAchievement_Achievement_AchievementName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 285
                    if (!isobj10TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj10, obj, null);
                    }
                }
            }
            private void Update_ViewModel_NumberOfPostsGetTopAchievement_Achievement_Icon(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 282
                    if (!isobj11SourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj11, (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), obj), null);
                    }
                }
            }
            private void Update_ViewModel_NumberOfPostsGetTopAchievement_Opacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 282
                    if (!isobj11OpacityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Opacity(this.obj11, obj);
                    }
                }
            }
            private void Update_ViewModel_YearsOfActivity(global::SteamProfile.Models.AchievementWithStatus obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_YearsOfActivity_Achievement(obj.Achievement, phase);
                        this.Update_ViewModel_YearsOfActivity_Opacity(obj.Opacity, phase);
                    }
                }
            }
            private void Update_ViewModel_YearsOfActivity_Achievement(global::SteamProfile.Models.Achievement obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_YearsOfActivity_Achievement_AchievementName(obj.AchievementName, phase);
                        this.Update_ViewModel_YearsOfActivity_Achievement_Icon(obj.Icon, phase);
                    }
                }
            }
            private void Update_ViewModel_YearsOfActivity_Achievement_AchievementName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 269
                    if (!isobj12TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj12, obj, null);
                    }
                }
            }
            private void Update_ViewModel_YearsOfActivity_Achievement_Icon(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 266
                    if (!isobj13SourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj13, (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), obj), null);
                    }
                }
            }
            private void Update_ViewModel_YearsOfActivity_Opacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 266
                    if (!isobj13OpacityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Opacity(this.obj13, obj);
                    }
                }
            }
            private void Update_ViewModel_DeveloperAchievement(global::SteamProfile.Models.AchievementWithStatus obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_DeveloperAchievement_Achievement(obj.Achievement, phase);
                        this.Update_ViewModel_DeveloperAchievement_Opacity(obj.Opacity, phase);
                    }
                }
            }
            private void Update_ViewModel_DeveloperAchievement_Achievement(global::SteamProfile.Models.Achievement obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_DeveloperAchievement_Achievement_AchievementName(obj.AchievementName, phase);
                        this.Update_ViewModel_DeveloperAchievement_Achievement_Icon(obj.Icon, phase);
                    }
                }
            }
            private void Update_ViewModel_DeveloperAchievement_Achievement_AchievementName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 253
                    if (!isobj14TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj14, obj, null);
                    }
                }
            }
            private void Update_ViewModel_DeveloperAchievement_Achievement_Icon(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 250
                    if (!isobj15SourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj15, (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), obj), null);
                    }
                }
            }
            private void Update_ViewModel_DeveloperAchievement_Opacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 250
                    if (!isobj15OpacityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Opacity(this.obj15, obj);
                    }
                }
            }
            private void Update_ViewModel_NumberOfReviewsReceived(global::SteamProfile.Models.AchievementWithStatus obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_NumberOfReviewsReceived_Achievement(obj.Achievement, phase);
                        this.Update_ViewModel_NumberOfReviewsReceived_Opacity(obj.Opacity, phase);
                    }
                }
            }
            private void Update_ViewModel_NumberOfReviewsReceived_Achievement(global::SteamProfile.Models.Achievement obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_NumberOfReviewsReceived_Achievement_AchievementName(obj.AchievementName, phase);
                        this.Update_ViewModel_NumberOfReviewsReceived_Achievement_Icon(obj.Icon, phase);
                    }
                }
            }
            private void Update_ViewModel_NumberOfReviewsReceived_Achievement_AchievementName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 237
                    if (!isobj16TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj16, obj, null);
                    }
                }
            }
            private void Update_ViewModel_NumberOfReviewsReceived_Achievement_Icon(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 234
                    if (!isobj17SourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj17, (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), obj), null);
                    }
                }
            }
            private void Update_ViewModel_NumberOfReviewsReceived_Opacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 234
                    if (!isobj17OpacityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Opacity(this.obj17, obj);
                    }
                }
            }
            private void Update_ViewModel_NumberOfReviewsAchievement(global::SteamProfile.Models.AchievementWithStatus obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_NumberOfReviewsAchievement_Achievement(obj.Achievement, phase);
                        this.Update_ViewModel_NumberOfReviewsAchievement_Opacity(obj.Opacity, phase);
                    }
                }
            }
            private void Update_ViewModel_NumberOfReviewsAchievement_Achievement(global::SteamProfile.Models.Achievement obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_NumberOfReviewsAchievement_Achievement_AchievementName(obj.AchievementName, phase);
                        this.Update_ViewModel_NumberOfReviewsAchievement_Achievement_Icon(obj.Icon, phase);
                    }
                }
            }
            private void Update_ViewModel_NumberOfReviewsAchievement_Achievement_AchievementName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 221
                    if (!isobj18TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj18, obj, null);
                    }
                }
            }
            private void Update_ViewModel_NumberOfReviewsAchievement_Achievement_Icon(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 218
                    if (!isobj19SourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj19, (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), obj), null);
                    }
                }
            }
            private void Update_ViewModel_NumberOfReviewsAchievement_Opacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 218
                    if (!isobj19OpacityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Opacity(this.obj19, obj);
                    }
                }
            }
            private void Update_ViewModel_SoldGamesAchievement(global::SteamProfile.Models.AchievementWithStatus obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SoldGamesAchievement_Achievement(obj.Achievement, phase);
                        this.Update_ViewModel_SoldGamesAchievement_Opacity(obj.Opacity, phase);
                    }
                }
            }
            private void Update_ViewModel_SoldGamesAchievement_Achievement(global::SteamProfile.Models.Achievement obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SoldGamesAchievement_Achievement_AchievementName(obj.AchievementName, phase);
                        this.Update_ViewModel_SoldGamesAchievement_Achievement_Icon(obj.Icon, phase);
                    }
                }
            }
            private void Update_ViewModel_SoldGamesAchievement_Achievement_AchievementName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 205
                    if (!isobj20TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj20, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SoldGamesAchievement_Achievement_Icon(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 202
                    if (!isobj21SourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj21, (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), obj), null);
                    }
                }
            }
            private void Update_ViewModel_SoldGamesAchievement_Opacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 202
                    if (!isobj21OpacityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Opacity(this.obj21, obj);
                    }
                }
            }
            private void Update_ViewModel_OwnedGamesAchievement(global::SteamProfile.Models.AchievementWithStatus obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_OwnedGamesAchievement_Achievement(obj.Achievement, phase);
                        this.Update_ViewModel_OwnedGamesAchievement_Opacity(obj.Opacity, phase);
                    }
                }
            }
            private void Update_ViewModel_OwnedGamesAchievement_Achievement(global::SteamProfile.Models.Achievement obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_OwnedGamesAchievement_Achievement_AchievementName(obj.AchievementName, phase);
                        this.Update_ViewModel_OwnedGamesAchievement_Achievement_Icon(obj.Icon, phase);
                    }
                }
            }
            private void Update_ViewModel_OwnedGamesAchievement_Achievement_AchievementName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 189
                    if (!isobj22TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj22, obj, null);
                    }
                }
            }
            private void Update_ViewModel_OwnedGamesAchievement_Achievement_Icon(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 186
                    if (!isobj23SourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj23, (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), obj), null);
                    }
                }
            }
            private void Update_ViewModel_OwnedGamesAchievement_Opacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 186
                    if (!isobj23OpacityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Opacity(this.obj23, obj);
                    }
                }
            }
            private void Update_ViewModel_FriendshipsAchievement(global::SteamProfile.Models.AchievementWithStatus obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_FriendshipsAchievement_Achievement(obj.Achievement, phase);
                        this.Update_ViewModel_FriendshipsAchievement_Opacity(obj.Opacity, phase);
                    }
                }
            }
            private void Update_ViewModel_FriendshipsAchievement_Achievement(global::SteamProfile.Models.Achievement obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_FriendshipsAchievement_Achievement_AchievementName(obj.AchievementName, phase);
                        this.Update_ViewModel_FriendshipsAchievement_Achievement_Icon(obj.Icon, phase);
                    }
                }
            }
            private void Update_ViewModel_FriendshipsAchievement_Achievement_AchievementName(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 173
                    if (!isobj24TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj24, obj, null);
                    }
                }
            }
            private void Update_ViewModel_FriendshipsAchievement_Achievement_Icon(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 170
                    if (!isobj25SourceDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Image_Source(this.obj25, (global::Microsoft.UI.Xaml.Media.ImageSource) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.Media.ImageSource), obj), null);
                    }
                }
            }
            private void Update_ViewModel_FriendshipsAchievement_Opacity(global::System.Double obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 170
                    if (!isobj25OpacityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Opacity(this.obj25, obj);
                    }
                }
            }
            private void Update_ViewModel_ShowAllAchievementsCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ProfilePage.xaml line 144
                    if (!isobj26CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj26, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Bio(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 120
                    if (!isobj28TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj28, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ShowFriendsCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 74
                    if (!isobj29CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj29, obj, null);
                    }
                }
            }
            private void Update_ViewModel_FriendButtonText(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 92
                    if (!isobj30ContentDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_ContentControl_Content(this.obj30, obj, null);
                    }
                }
            }
            private void Update_ViewModel_ToggleFriendshipCommand(global::CommunityToolkit.Mvvm.Input.IAsyncRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ProfilePage.xaml line 92
                    if (!isobj30CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj30, obj, null);
                    }
                }
            }
            private void Update_ViewModel_IsDeveloper(global::System.Boolean obj, int phase)
            {
                if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                {
                    this.Update_ViewModel_IsDeveloper_Cast_IsDeveloper_To_Visibility(obj ? global::Microsoft.UI.Xaml.Visibility.Visible : global::Microsoft.UI.Xaml.Visibility.Collapsed, phase);
                }
            }
            private void Update_ViewModel_IsDeveloper_Cast_IsDeveloper_To_Visibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 102
                    if (!isobj31VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj31, obj);
                    }
                }
            }
            private void Update_ViewModel_FriendCount(global::System.Int32 obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ProfilePage.xaml line 85
                    if (!isobj32TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj32, obj.ToString(), null);
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class ProfilePage_obj1_BindingsTracking
            {
                private global::System.WeakReference<ProfilePage_obj1_Bindings> weakRefToBindingObj; 

                public ProfilePage_obj1_BindingsTracking(ProfilePage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<ProfilePage_obj1_Bindings>(obj);
                }

                public ProfilePage_obj1_Bindings TryGetBindingObject()
                {
                    ProfilePage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                    UpdateChildListeners_ViewModel_Collections(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ProfilePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::SteamProfile.ViewModels.ProfileViewModel obj = sender as global::SteamProfile.ViewModels.ProfileViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_IsOwner(obj.IsOwner, DATA_CHANGED);
                                bindings.Update_ViewModel_Collections(obj.Collections, DATA_CHANGED);
                                bindings.Update_ViewModel_NumberOfPostsGetTopAchievement(obj.NumberOfPostsGetTopAchievement, DATA_CHANGED);
                                bindings.Update_ViewModel_YearsOfActivity(obj.YearsOfActivity, DATA_CHANGED);
                                bindings.Update_ViewModel_DeveloperAchievement(obj.DeveloperAchievement, DATA_CHANGED);
                                bindings.Update_ViewModel_NumberOfReviewsReceived(obj.NumberOfReviewsReceived, DATA_CHANGED);
                                bindings.Update_ViewModel_NumberOfReviewsAchievement(obj.NumberOfReviewsAchievement, DATA_CHANGED);
                                bindings.Update_ViewModel_SoldGamesAchievement(obj.SoldGamesAchievement, DATA_CHANGED);
                                bindings.Update_ViewModel_OwnedGamesAchievement(obj.OwnedGamesAchievement, DATA_CHANGED);
                                bindings.Update_ViewModel_FriendshipsAchievement(obj.FriendshipsAchievement, DATA_CHANGED);
                                bindings.Update_ViewModel_Bio(obj.Bio, DATA_CHANGED);
                                bindings.Update_ViewModel_ShowFriendsCommand(obj.ShowFriendsCommand, DATA_CHANGED);
                                bindings.Update_ViewModel_FriendButtonText(obj.FriendButtonText, DATA_CHANGED);
                                bindings.Update_ViewModel_IsDeveloper(obj.IsDeveloper, DATA_CHANGED);
                                bindings.Update_ViewModel_FriendCount(obj.FriendCount, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "IsOwner":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsOwner(obj.IsOwner, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Collections":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Collections(obj.Collections, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NumberOfPostsGetTopAchievement":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_NumberOfPostsGetTopAchievement(obj.NumberOfPostsGetTopAchievement, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "YearsOfActivity":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_YearsOfActivity(obj.YearsOfActivity, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DeveloperAchievement":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_DeveloperAchievement(obj.DeveloperAchievement, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NumberOfReviewsReceived":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_NumberOfReviewsReceived(obj.NumberOfReviewsReceived, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "NumberOfReviewsAchievement":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_NumberOfReviewsAchievement(obj.NumberOfReviewsAchievement, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SoldGamesAchievement":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SoldGamesAchievement(obj.SoldGamesAchievement, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "OwnedGamesAchievement":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_OwnedGamesAchievement(obj.OwnedGamesAchievement, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FriendshipsAchievement":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FriendshipsAchievement(obj.FriendshipsAchievement, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Bio":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Bio(obj.Bio, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ShowFriendsCommand":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ShowFriendsCommand(obj.ShowFriendsCommand, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FriendButtonText":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FriendButtonText(obj.FriendButtonText, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "IsDeveloper":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_IsDeveloper(obj.IsDeveloper, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "FriendCount":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_FriendCount(obj.FriendCount, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::SteamProfile.ViewModels.ProfileViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::SteamProfile.ViewModels.ProfileViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void PropertyChanged_ViewModel_Collections(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    ProfilePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::System.Collections.ObjectModel.ObservableCollection<global::SteamProfile.Models.Collection> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SteamProfile.Models.Collection>;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                        }
                        else
                        {
                            switch (propName)
                            {
                                default:
                                    break;
                            }
                        }
                    }
                }
                public void CollectionChanged_ViewModel_Collections(object sender, global::System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
                {
                    ProfilePage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        global::System.Collections.ObjectModel.ObservableCollection<global::SteamProfile.Models.Collection> obj = sender as global::System.Collections.ObjectModel.ObservableCollection<global::SteamProfile.Models.Collection>;
                    }
                }
                private global::System.Collections.ObjectModel.ObservableCollection<global::SteamProfile.Models.Collection> cache_ViewModel_Collections = null;
                public void UpdateChildListeners_ViewModel_Collections(global::System.Collections.ObjectModel.ObservableCollection<global::SteamProfile.Models.Collection> obj)
                {
                    if (obj != cache_ViewModel_Collections)
                    {
                        if (cache_ViewModel_Collections != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel_Collections).PropertyChanged -= PropertyChanged_ViewModel_Collections;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)cache_ViewModel_Collections).CollectionChanged -= CollectionChanged_ViewModel_Collections;
                            cache_ViewModel_Collections = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel_Collections = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel_Collections;
                            ((global::System.Collections.Specialized.INotifyCollectionChanged)obj).CollectionChanged += CollectionChanged_ViewModel_Collections;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 27: // Views\ProfilePage.xaml line 60
                {
                    this.ProfileControl = global::WinRT.CastExtensions.As<global::SteamProfile.Views.AdaptiveProfileControl>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\ProfilePage.xaml line 2
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    ProfilePage_obj1_Bindings bindings = new ProfilePage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

