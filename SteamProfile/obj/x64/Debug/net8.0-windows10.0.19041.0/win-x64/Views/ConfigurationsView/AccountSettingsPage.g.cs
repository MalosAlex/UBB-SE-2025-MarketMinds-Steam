#pragma checksum "C:\Users\Bianca\Desktop\ISS\UBB-SE-2025-Spice\SteamProfile\Views\ConfigurationsView\AccountSettingsPage.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "42E58C7557094BF40F2546611D3EECCC2C6525D1C06E06410DCBBCEB22B37163"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SteamProfile.Views.ConfigurationsView
{
    partial class AccountSettingsPage : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(global::Microsoft.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_UIElement_Visibility(global::Microsoft.UI.Xaml.UIElement obj, global::Microsoft.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_PasswordBox_Password(global::Microsoft.UI.Xaml.Controls.PasswordBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Password = value ?? global::System.String.Empty;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(global::Microsoft.UI.Xaml.Controls.Control obj, global::System.Boolean value)
            {
                obj.IsEnabled = value;
            }
            public static void Set_Microsoft_UI_Xaml_Controls_TextBox_Text(global::Microsoft.UI.Xaml.Controls.TextBox obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class AccountSettingsPage_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IAccountSettingsPage_Bindings
        {
            private global::SteamProfile.Views.ConfigurationsView.AccountSettingsPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Microsoft.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Microsoft.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj2;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj3;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj4;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj5;
            private global::Microsoft.UI.Xaml.Controls.TextBlock obj6;
            private global::Microsoft.UI.Xaml.Controls.Button obj7;
            private global::Microsoft.UI.Xaml.Controls.Button obj8;
            private global::Microsoft.UI.Xaml.Controls.PasswordBox obj10;
            private global::Microsoft.UI.Xaml.Controls.Button obj11;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj12;
            private global::Microsoft.UI.Xaml.Controls.Button obj13;
            private global::Microsoft.UI.Xaml.Controls.TextBox obj14;
            private global::Microsoft.UI.Xaml.Controls.Button obj15;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj2TextDisabled = false;
            private static bool isobj2VisibilityDisabled = false;
            private static bool isobj3VisibilityDisabled = false;
            private static bool isobj4VisibilityDisabled = false;
            private static bool isobj5VisibilityDisabled = false;
            private static bool isobj6TextDisabled = false;
            private static bool isobj6VisibilityDisabled = false;
            private static bool isobj7CommandDisabled = false;
            private static bool isobj8CommandDisabled = false;
            private static bool isobj10PasswordDisabled = false;
            private static bool isobj11CommandDisabled = false;
            private static bool isobj11IsEnabledDisabled = false;
            private static bool isobj12TextDisabled = false;
            private static bool isobj13CommandDisabled = false;
            private static bool isobj13IsEnabledDisabled = false;
            private static bool isobj14TextDisabled = false;
            private static bool isobj15CommandDisabled = false;
            private static bool isobj15IsEnabledDisabled = false;

            private AccountSettingsPage_obj1_BindingsTracking bindingsTracking;

            public AccountSettingsPage_obj1_Bindings()
            {
                this.bindingsTracking = new AccountSettingsPage_obj1_BindingsTracking(this);
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 17 && columnNumber == 24)
                {
                    isobj2TextDisabled = true;
                }
                else if (lineNumber == 19 && columnNumber == 24)
                {
                    isobj2VisibilityDisabled = true;
                }
                else if (lineNumber == 35 && columnNumber == 24)
                {
                    isobj3VisibilityDisabled = true;
                }
                else if (lineNumber == 48 && columnNumber == 24)
                {
                    isobj4VisibilityDisabled = true;
                }
                else if (lineNumber == 62 && columnNumber == 24)
                {
                    isobj5VisibilityDisabled = true;
                }
                else if (lineNumber == 65 && columnNumber == 24)
                {
                    isobj6TextDisabled = true;
                }
                else if (lineNumber == 67 && columnNumber == 24)
                {
                    isobj6VisibilityDisabled = true;
                }
                else if (lineNumber == 75 && columnNumber == 25)
                {
                    isobj7CommandDisabled = true;
                }
                else if (lineNumber == 77 && columnNumber == 25)
                {
                    isobj8CommandDisabled = true;
                }
                else if (lineNumber == 54 && columnNumber == 30)
                {
                    isobj10PasswordDisabled = true;
                }
                else if (lineNumber == 56 && columnNumber == 25)
                {
                    isobj11CommandDisabled = true;
                }
                else if (lineNumber == 57 && columnNumber == 25)
                {
                    isobj11IsEnabledDisabled = true;
                }
                else if (lineNumber == 41 && columnNumber == 26)
                {
                    isobj12TextDisabled = true;
                }
                else if (lineNumber == 43 && columnNumber == 25)
                {
                    isobj13CommandDisabled = true;
                }
                else if (lineNumber == 44 && columnNumber == 25)
                {
                    isobj13IsEnabledDisabled = true;
                }
                else if (lineNumber == 28 && columnNumber == 26)
                {
                    isobj14TextDisabled = true;
                }
                else if (lineNumber == 30 && columnNumber == 25)
                {
                    isobj15CommandDisabled = true;
                }
                else if (lineNumber == 31 && columnNumber == 25)
                {
                    isobj15IsEnabledDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 2: // Views\ConfigurationsView\AccountSettingsPage.xaml line 17
                        this.obj2 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 3: // Views\ConfigurationsView\AccountSettingsPage.xaml line 33
                        this.obj3 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 4: // Views\ConfigurationsView\AccountSettingsPage.xaml line 46
                        this.obj4 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 5: // Views\ConfigurationsView\AccountSettingsPage.xaml line 59
                        this.obj5 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 6: // Views\ConfigurationsView\AccountSettingsPage.xaml line 65
                        this.obj6 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                        break;
                    case 7: // Views\ConfigurationsView\AccountSettingsPage.xaml line 73
                        this.obj7 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 8: // Views\ConfigurationsView\AccountSettingsPage.xaml line 76
                        this.obj8 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 10: // Views\ConfigurationsView\AccountSettingsPage.xaml line 53
                        this.obj10 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.PasswordBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_10(this.obj10);
                        break;
                    case 11: // Views\ConfigurationsView\AccountSettingsPage.xaml line 55
                        this.obj11 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 12: // Views\ConfigurationsView\AccountSettingsPage.xaml line 40
                        this.obj12 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_12(this.obj12);
                        break;
                    case 13: // Views\ConfigurationsView\AccountSettingsPage.xaml line 42
                        this.obj13 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    case 14: // Views\ConfigurationsView\AccountSettingsPage.xaml line 27
                        this.obj14 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                        this.bindingsTracking.RegisterTwoWayListener_14(this.obj14);
                        break;
                    case 15: // Views\ConfigurationsView\AccountSettingsPage.xaml line 29
                        this.obj15 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IAccountSettingsPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::SteamProfile.Views.ConfigurationsView.AccountSettingsPage>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Microsoft.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Microsoft.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Microsoft.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Microsoft.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Microsoft.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Microsoft.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::SteamProfile.Views.ConfigurationsView.AccountSettingsPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel(obj.ViewModel, phase);
                    }
                }
            }
            private void Update_ViewModel(global::SteamProfile.ViewModels.ConfigurationsViewModels.AccountSettingsViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_ViewModel(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_SuccessMessage(obj.SuccessMessage, phase);
                        this.Update_ViewModel_SuccessMessageVisibility(obj.SuccessMessageVisibility, phase);
                        this.Update_ViewModel_UsernameErrorMessageVisibility(obj.UsernameErrorMessageVisibility, phase);
                        this.Update_ViewModel_EmailErrorMessageVisibility(obj.EmailErrorMessageVisibility, phase);
                        this.Update_ViewModel_PasswordErrorMessageVisibility(obj.PasswordErrorMessageVisibility, phase);
                        this.Update_ViewModel_ErrorMessage(obj.ErrorMessage, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_DeleteAccountCommand(obj.DeleteAccountCommand, phase);
                        this.Update_ViewModel_LogoutCommand(obj.LogoutCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_Password(obj.Password, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_UpdatePasswordCommand(obj.UpdatePasswordCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_UpdatePasswordEnabled(obj.UpdatePasswordEnabled, phase);
                        this.Update_ViewModel_Email(obj.Email, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_UpdateEmailCommand(obj.UpdateEmailCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_UpdateEmailEnabled(obj.UpdateEmailEnabled, phase);
                        this.Update_ViewModel_Username(obj.Username, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_UpdateUsernameCommand(obj.UpdateUsernameCommand, phase);
                    }
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_ViewModel_UpdateUsernameEnabled(obj.UpdateUsernameEnabled, phase);
                    }
                }
            }
            private void Update_ViewModel_SuccessMessage(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 17
                    if (!isobj2TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj2, obj, null);
                    }
                }
            }
            private void Update_ViewModel_SuccessMessageVisibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 17
                    if (!isobj2VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj2, obj);
                    }
                }
            }
            private void Update_ViewModel_UsernameErrorMessageVisibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 33
                    if (!isobj3VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj3, obj);
                    }
                }
            }
            private void Update_ViewModel_EmailErrorMessageVisibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 46
                    if (!isobj4VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj4, obj);
                    }
                }
            }
            private void Update_ViewModel_PasswordErrorMessageVisibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 59
                    if (!isobj5VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj5, obj);
                    }
                }
            }
            private void Update_ViewModel_ErrorMessage(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 65
                    if (!isobj6TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBlock_Text(this.obj6, obj, null);
                    }
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 65
                    if (!isobj6VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj6, (global::Microsoft.UI.Xaml.Visibility)this.LookupConverter("StringLengthToVisibilityConverter").Convert(obj, typeof(global::Microsoft.UI.Xaml.Visibility), null, null));
                    }
                }
            }
            private void Update_ViewModel_DeleteAccountCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 73
                    if (!isobj7CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj7, obj, null);
                    }
                }
            }
            private void Update_ViewModel_LogoutCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 76
                    if (!isobj8CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj8, obj, null);
                    }
                }
            }
            private void Update_ViewModel_Password(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 53
                    if (!isobj10PasswordDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_PasswordBox_Password(this.obj10, obj, null);
                    }
                }
            }
            private void Update_ViewModel_UpdatePasswordCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 55
                    if (!isobj11CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj11, obj, null);
                    }
                }
            }
            private void Update_ViewModel_UpdatePasswordEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 55
                    if (!isobj11IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(this.obj11, obj);
                    }
                }
            }
            private void Update_ViewModel_Email(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 40
                    if (!isobj12TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj12, obj, null);
                    }
                }
            }
            private void Update_ViewModel_UpdateEmailCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 42
                    if (!isobj13CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj13, obj, null);
                    }
                }
            }
            private void Update_ViewModel_UpdateEmailEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 42
                    if (!isobj13IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(this.obj13, obj);
                    }
                }
            }
            private void Update_ViewModel_Username(global::System.String obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 27
                    if (!isobj14TextDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TextBox_Text(this.obj14, obj, null);
                    }
                }
            }
            private void Update_ViewModel_UpdateUsernameCommand(global::CommunityToolkit.Mvvm.Input.IRelayCommand obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 29
                    if (!isobj15CommandDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj15, obj, null);
                    }
                }
            }
            private void Update_ViewModel_UpdateUsernameEnabled(global::System.Boolean obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    // Views\ConfigurationsView\AccountSettingsPage.xaml line 29
                    if (!isobj15IsEnabledDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_Control_IsEnabled(this.obj15, obj);
                    }
                }
            }
            private void UpdateTwoWay_10_Password()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Password = this.obj10.Password;
                        }
                    }
                }
            }
            private void UpdateTwoWay_12_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Email = this.obj12.Text;
                        }
                    }
                }
            }
            private void UpdateTwoWay_14_Text()
            {
                if (this.initialized)
                {
                    if (this.dataRoot != null)
                    {
                        if (this.dataRoot.ViewModel != null)
                        {
                            this.dataRoot.ViewModel.Username = this.obj14.Text;
                        }
                    }
                }
            }

            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private class AccountSettingsPage_obj1_BindingsTracking
            {
                private global::System.WeakReference<AccountSettingsPage_obj1_Bindings> weakRefToBindingObj; 

                public AccountSettingsPage_obj1_BindingsTracking(AccountSettingsPage_obj1_Bindings obj)
                {
                    weakRefToBindingObj = new global::System.WeakReference<AccountSettingsPage_obj1_Bindings>(obj);
                }

                public AccountSettingsPage_obj1_Bindings TryGetBindingObject()
                {
                    AccountSettingsPage_obj1_Bindings bindingObject = null;
                    if (weakRefToBindingObj != null)
                    {
                        weakRefToBindingObj.TryGetTarget(out bindingObject);
                        if (bindingObject == null)
                        {
                            weakRefToBindingObj = null;
                            ReleaseAllListeners();
                        }
                    }
                    return bindingObject;
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_ViewModel(null);
                }

                public void PropertyChanged_ViewModel(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    AccountSettingsPage_obj1_Bindings bindings = TryGetBindingObject();
                    if (bindings != null)
                    {
                        string propName = e.PropertyName;
                        global::SteamProfile.ViewModels.ConfigurationsViewModels.AccountSettingsViewModel obj = sender as global::SteamProfile.ViewModels.ConfigurationsViewModels.AccountSettingsViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                bindings.Update_ViewModel_SuccessMessage(obj.SuccessMessage, DATA_CHANGED);
                                bindings.Update_ViewModel_SuccessMessageVisibility(obj.SuccessMessageVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_UsernameErrorMessageVisibility(obj.UsernameErrorMessageVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_EmailErrorMessageVisibility(obj.EmailErrorMessageVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_PasswordErrorMessageVisibility(obj.PasswordErrorMessageVisibility, DATA_CHANGED);
                                bindings.Update_ViewModel_ErrorMessage(obj.ErrorMessage, DATA_CHANGED);
                                bindings.Update_ViewModel_Password(obj.Password, DATA_CHANGED);
                                bindings.Update_ViewModel_UpdatePasswordEnabled(obj.UpdatePasswordEnabled, DATA_CHANGED);
                                bindings.Update_ViewModel_Email(obj.Email, DATA_CHANGED);
                                bindings.Update_ViewModel_UpdateEmailEnabled(obj.UpdateEmailEnabled, DATA_CHANGED);
                                bindings.Update_ViewModel_Username(obj.Username, DATA_CHANGED);
                                bindings.Update_ViewModel_UpdateUsernameEnabled(obj.UpdateUsernameEnabled, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "SuccessMessage":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SuccessMessage(obj.SuccessMessage, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SuccessMessageVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_SuccessMessageVisibility(obj.SuccessMessageVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "UsernameErrorMessageVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_UsernameErrorMessageVisibility(obj.UsernameErrorMessageVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "EmailErrorMessageVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_EmailErrorMessageVisibility(obj.EmailErrorMessageVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "PasswordErrorMessageVisibility":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_PasswordErrorMessageVisibility(obj.PasswordErrorMessageVisibility, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "ErrorMessage":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_ErrorMessage(obj.ErrorMessage, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Password":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Password(obj.Password, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "UpdatePasswordEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_UpdatePasswordEnabled(obj.UpdatePasswordEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Email":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Email(obj.Email, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "UpdateEmailEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_UpdateEmailEnabled(obj.UpdateEmailEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Username":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_Username(obj.Username, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "UpdateUsernameEnabled":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_ViewModel_UpdateUsernameEnabled(obj.UpdateUsernameEnabled, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::SteamProfile.ViewModels.ConfigurationsViewModels.AccountSettingsViewModel cache_ViewModel = null;
                public void UpdateChildListeners_ViewModel(global::SteamProfile.ViewModels.ConfigurationsViewModels.AccountSettingsViewModel obj)
                {
                    if (obj != cache_ViewModel)
                    {
                        if (cache_ViewModel != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_ViewModel).PropertyChanged -= PropertyChanged_ViewModel;
                            cache_ViewModel = null;
                        }
                        if (obj != null)
                        {
                            cache_ViewModel = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_ViewModel;
                        }
                    }
                }
                public void RegisterTwoWayListener_10(global::Microsoft.UI.Xaml.Controls.PasswordBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.PasswordBox.PasswordProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_10_Password();
                        }
                    });
                }
                public void RegisterTwoWayListener_12(global::Microsoft.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_12_Text();
                        }
                    });
                }
                public void RegisterTwoWayListener_14(global::Microsoft.UI.Xaml.Controls.TextBox sourceObject)
                {
                    sourceObject.RegisterPropertyChangedCallback(global::Microsoft.UI.Xaml.Controls.TextBox.TextProperty, (sender, prop) =>
                    {
                        var bindingObj = this.TryGetBindingObject();
                        if (bindingObj != null)
                        {
                            bindingObj.UpdateTwoWay_14_Text();
                        }
                    });
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 9: // Views\ConfigurationsView\AccountSettingsPage.xaml line 78
                {
                    global::Microsoft.UI.Xaml.Controls.Button element9 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)element9).Click += this.GoBack;
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // Views\ConfigurationsView\AccountSettingsPage.xaml line 2
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    AccountSettingsPage_obj1_Bindings bindings = new AccountSettingsPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

